{"remainingRequest":"/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/src/components/CreateDepartamento.vue?vue&type=template&id=6d040d60&","dependencies":[{"path":"/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/src/components/CreateDepartamento.vue","mtime":1658262862528},{"path":"/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/cache-loader/dist/cjs.js","mtime":1658255560932},{"path":"/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1658255564420},{"path":"/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/cache-loader/dist/cjs.js","mtime":1658255560932},{"path":"/home/salai/Documentos/Sofi/semana7Bim2/taller14-sofi-jo/desarrollo/proyecto-vuejs/node_modules/vue-loader/lib/index.js","mtime":1658255564416}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}